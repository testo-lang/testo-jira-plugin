0. Обновить Testo до 2.1.1

1. Установка testo-tm4j

- testo-tm4j необходимо устанавливать на ту же машину, на которой будет запускаться интерпретатор testo
- предварительно необходимо установить Nodejs версии и пакетный менеджер npm (sudo apt install nodejs npm) (если ещё не установлено)
- сам пакет testo-tm4j устанавливается командой sudo npm -i testo-tm4j --global
- проверить, что пакет установился удачно, можно командой testo-tm4j --help

2. Подготовка со стороны Jira

- testo-tm4j работает с циклами тестов (Test Cycle) в Test Management For Jira (TM4J), и не работает с индивидуальными тестами. Чтобы прогнать тест из Jira через Testo, этот тест должен находиться в каком-либо цикле.
- за один запуск testo-tm4j можно прогнать только один цикл

3. Работа с TM4J

Список аргументов следующий:

--jira_url (обязательный) - url до главной страницы Jira (http://www.my_host.ru/jira)
--cycle (обязательный) - ключ цикла, который необходимо прогнать (SAMPLE-C1)
--username, password (обязательно) - логин и пароль пользователя, который обладает достаточным количеством прав для чтения тестовых циклов и для размещения результатов прогона тестов
--testo_project_dir (обязательный) - путь к директории Testo, где располагаются тестовые сценарии .testo. В директории допускается наличие вложенных папок.
--license (необязательно) - пусть к лицензии Testo, если таковая имеется
--param <param name> <param value> (необязательно, можно повторять несколько раз) - передача в Testo параметров. Например, --param ISO_DIR /opt/iso --param FLASH_DIR /opt/flash

Алгоритм работы TM4J выглядит так:
1. Плагин соединяется с Jira и скачивает информацию о переданном в качестве аргумента цикле. Возможные ошибки на этом этапе:
	- Неправильно передан URL
	- Неправильный логин/пароль
	- У пользователя недостаточно прав для чтения информации о циклах
2. Из информации о цикле извлекается информация о ключах Тесткейсов, которые в него включены (например, SAMPLE-T1 и SAMPLE-T2)
3. В папке, указанной в testo_project_dir (и всех её подпапках), ищутся файлы с разваниями вида "TestKey.testo". Например, в нашем случае это файлы SAMPLE-T1.testo и SAMPLE-T2.testo. Имена файлов чувствительны к регистру. Возможные ошибки на этом этапе:
	- Количество найденных файлов не совпадает с количеством Тесткейсов в цикле
4. Для каждого найденного файла запускается testo-интерпретатор. Результаты тестов складываются в папку /tmp/testo-tm4j/. Возможные ошибки на этом этапе:
	- Как минимум для одного запуска Testo не прошёл успешно этап синтаксического/семантического анализа. В этом случае никакие результаты в Jira не попадут, даже если на момент проблемного вызова Testo уже успело пройти N беспроблемных.
5. После того, как testo отработает все тесткейсы (SAMPLE-T1 и SAMPLE-T2), плагин собирает отчёт по каждому из тесткейсов и отправляет его на Jira, создавая новые результаты прогона тестов (testresult). Например, SAMPLE-E1 и SAMPLE-E2. Результат прогона каждого теста выбирается на основе результатов прогона testo-тестов внутри сценария: если в файле SAMPLE-T1.testo все тесты отработали успешно, то общий результат для тесткейса SAMPLE-T1 будет положительным. Если хотя бы один testo-тест втнури SAMPLE-T1 отработал неуспешно, то весь тесткейс SAMPLE-T1 будет иметь статус "Fail"
6. Для каждого testresult, testo-tm4j формирует output интерпретатора testo и прикладывает его в отчёт о выполнении теста. Также эта информация дублируется в приложении summary_output.testo, которое прикрепляется к прогону теста. Помимо summary_output в отчёт также вкладываются все скриншоты с проваленными командами wait.